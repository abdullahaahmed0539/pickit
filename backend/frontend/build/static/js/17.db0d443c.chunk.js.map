{"version":3,"sources":["Components/ProductCard.js","pages/Category.jsx","pages/Error.jsx","API calls/categories.js"],"names":["ProductCard","props","image","name","price","transactionType","onButtonPress","className","src","alt","onClick","style","cursor","charAt","toUpperCase","slice","toFixed","color","Button","withRouter","history","categoryId","useParams","useState","products","setProducts","pageId","setPageId","pages","setPages","error","setError","responseRecieved","setResponseRecieved","useEffect","fetchProducts","then","response","data","categoryProducts","arrpages","number","Math","ceil","totalProducts","push","catch","err","Spinner","text","Error","title","message","length","marginTop","window","location","map","product","images","productName","_id","display","justifyContent","Pagination","Item","active","marginLeft","reload","token","localStorage","getItem","fetchCategories","a","headers","Authorization","axios","get"],"mappings":"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","file":"static/js/17.db0d443c.chunk.js","sourcesContent":["import { Button } from \"react-bootstrap\";\n\nconst ProductCard = (props) => {\n  const { image, name, price, transactionType, onButtonPress } = props;\n  return (\n    <div className=\"col-12 col-sm-6  col-lg-4 col-xl-3 mb-4 mt-2\">\n      <div className=\"card\">\n        <img\n          src={image}\n          className=\"card-img-top\"\n          alt=\"...\"\n          onClick={onButtonPress}\n          style={{ cursor: \"pointer\" }}\n        />\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">\n            <strong>{name.charAt(0).toUpperCase() + name.slice(1)}</strong>\n          </h6>\n          <p className=\"card-text\">\n            PKR <strong>{price.toFixed(2)}</strong>\n          </p>\n          <p className=\"card-text\">\n            Available for\n            <strong style={{ color: \"#198754\" }}>\n              {transactionType === \"sell\" ? \" Purchase\" : \" Exchange\"}\n            </strong>\n          </p>\n          <Button className=\"btn  btn-primary\" onClick={onButtonPress}>\n            Explore\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductCard;\n","import { useParams, withRouter } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { fetchProducts } from \"../API calls/categories\";\r\nimport { Pagination } from \"react-bootstrap\";\r\nimport ProductCard from \"../Components/ProductCard\";\r\nimport Error from \"./Error\";\r\nimport Spinner from \"../Components/Spinner\";\r\n\r\nconst Products = ({ history }) => {\r\n  const { categoryId } = useParams();\r\n  const [products, setProducts] = useState([]);\r\n  const [pageId, setPageId] = useState(1);\r\n  const limit = 12;\r\n  let itemsPaginate = [];\r\n  const [pages, setPages] = useState(itemsPaginate);\r\n  const [error, setError] = useState(false);\r\n  const [responseRecieved, setResponseRecieved] = useState(false);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchProducts(categoryId, pageId)\r\n      .then(response => {\r\n        setResponseRecieved(true);\r\n        setProducts(response.data.data.categoryProducts);\r\n        let arrpages = [];\r\n        for (\r\n          let number = 1;\r\n          number <= Math.ceil(response.data.data.totalProducts / limit);\r\n          number++\r\n        ) {\r\n          arrpages.push(number);\r\n        }\r\n        setPages(arrpages);\r\n      })\r\n      .catch(err => {\r\n        setResponseRecieved(true);\r\n        setError(true);\r\n      });\r\n  }, [categoryId, pageId]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {!error && !responseRecieved && <Spinner text=\"Fetching products\" />}\r\n      {error && (\r\n        <Error\r\n          title=\"Internal Server Error.\"\r\n          message=\"We are sorry for Inconvenience. You can try reloading the page.\"\r\n        />\r\n      )}\r\n      {!error && responseRecieved && products.length === 0 && (\r\n        <>\r\n          <div className=\"row mt-5\">\r\n            <div\r\n              className=\"d-flex justify-content-center\"\r\n              style={{ marginTop: \"100px\" }}\r\n            >\r\n              <h2>\r\n                <strong>No products to show.</strong>\r\n              </h2>\r\n            </div>\r\n          </div>\r\n          <div className=\"row \">\r\n            <div className=\"d-flex justify-content-center\">\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={() => (window.location = \"/\")}\r\n              >\r\n                back to home page\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      {!error &&\r\n        responseRecieved &&\r\n        products.length !==0 && (\r\n            <div className=\"row mt-4\">\r\n              <h2>Products available ({products.length})</h2>\r\n              {products.map(product => (\r\n                <ProductCard\r\n                  key={product._id}\r\n                  image={`${product.images[0]}`}\r\n                  name={product.productName}\r\n                  price={product.price}\r\n                  transactionType={product.transactionType}\r\n                  onButtonPress={() => history.push(`/products/${product._id}`)}\r\n                />\r\n              ))}\r\n\r\n              {pages && pages.length > 1 && (\r\n                <div\r\n                  style={{\r\n                    marginTop: \"10px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                >\r\n                  <Pagination>\r\n                    {pages.map(number => (\r\n                      <Pagination.Item\r\n                        key={number}\r\n                        onClick={() => setPageId(number)}\r\n                        active={number === pageId}\r\n                      >\r\n                        {number}\r\n                      </Pagination.Item>\r\n                    ))}\r\n                  </Pagination>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Products);\r\n","import React from 'react'\n\n\nconst Error = props => {\n    return (\n      <div\n        className=\"container border border-dark\"\n        style={{ marginTop: \"20%\" }}\n      >\n        <div className=\"row mt-5\">\n          <div className=\"col-md-8 offset-md-4\">\n            <h1>{props.title}</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-8 offset-md-4\">\n            <h4>{props.message}</h4>\n          </div>\n        </div>\n        <div className=\"row\">\n          <button\n            className=\"btn btn-primary col-md-2 offset-md-4 mt-4 mb-5\"\n            style={{ marginLeft: \"32em\" }}\n            onClick={() => {\n              window.location.reload(true);\n            }}\n          >\n            Reload\n          </button>\n        </div>\n      </div>\n    );\n}\n\nexport default Error\n","import axios from \"axios\";\n\nconst token = localStorage.getItem(\"token\");\n\n//fetches all categories\nexport const fetchCategories = async () => {\n  const headers = { Authorization: `Bearer ${token}` };\n  const response = await axios.get(\n    `http://localhost:8080/categories/`,\n    headers\n  );\n  return response;\n};\n\n//fetches products of a single category against a category id\nexport const fetchProducts = async (categoryId, pageId) => {\n  const headers = { Authorization: `Bearer ${token}` };\n  const response = await axios.get(\n    `http://localhost:8080/categories/${categoryId}/${pageId}`,\n    headers\n  );\n  return response;\n};\n"],"sourceRoot":""}